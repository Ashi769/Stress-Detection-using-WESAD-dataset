# -*- coding: utf-8 -*-
"""Mini.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1C1CEG42r35bW5rQ18HJAYzosfl4muUto
"""

from google.colab import drive
drive.mount("/content/drive", force_remount=True)

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

df=pd.read_csv('/content/drive/My Drive/DUMPYARD GROUP 32/Mini/final.csv',index_col=0)
sub_set=df['subject'].unique()
lab=['label']
dfs= dict(tuple(df.groupby("subject")))
df.head()

plt.plot(df.label,df.BVP_mean)

from sklearn.model_selection import train_test_split 
def to_test_train(df):

    X=df.drop(['label','subject'],axis=1).values
    y=df['label'].values
    X_tr,X_te,y_tr,y_te=train_test_split(X,y,test_size=0.3,random_state=41)
    # print(X_tr.shape)
    # print(X_te.shape)
    # print(y_tr.shape)
    # print(y_te.shape)
    # print(y_tr)
    return X_tr,y_tr,X_te,y_te

def accuracy(y_pred,y_te):
    er=0
    for j in range(y_te.shape[0]):
        if y_pred[j]==y_te[j]:
            er+=1
    return er/y_te.shape[0]

"""**TAKING ALL THE SUBJECTS FOR CLASSIFICATION**"""

X_tr_all,y_tr_all,X_te_all,y_te_all=to_test_train(df)

from sklearn.ensemble import RandomForestClassifier
clf=RandomForestClassifier(n_estimators=150,random_state=0,min_samples_split=2)
clf.fit(X_tr_all,y_tr_all)

y_pred_all=clf.predict(X_te_all)

print("Taking all subjects accuracy is",accuracy(y_pred_all,y_te_all)*100,"%")

from sklearn.metrics import accuracy_score, f1_score, precision_score, recall_score, classification_report
print("F1 Score",f1_score(y_te_all, y_pred_all, average="macro"))
print("Precision Score",precision_score(y_te_all, y_pred_all, average="macro"))
print("Recall Score",recall_score(y_te_all, y_pred_all, average="macro"))

"""**TAKING EACH SUBJECT AND TRAINING THE MODEL INDIVIDUALLY**"""

# Random Forest Classifier
ac=[]
pred=[]
test=[]
from sklearn.ensemble import RandomForestClassifier
for i in dfs:
    X_tr,y_tr,X_te,y_te=to_test_train(dfs[i])
    clf=RandomForestClassifier(n_estimators=150,random_state=0,min_samples_split=2)
    clf.fit(X_tr,y_tr) 
    y_pred=clf.predict(X_te)
    pred.append(y_pred)
    test.append(y_te)
    acc=accuracy(y_pred,y_te)
    print("Accuracy for subject:", i,"is",acc*100,"%")
    ac.append(acc*100)

ac=np.array(ac)
print("Mean Accuracy is",np.mean(ac),"%")

import matplotlib.pyplot as plt
import seaborn as sns
plt.figure(figsize=(14, 6))
plt.title('Testing Accuracies for each subject')
sns.barplot(x=sub_set, y=ac);

"""**MODEL** **EVALUATION**"""

from sklearn.metrics import confusion_matrix

plt.figure(figsize=(25,20))
it=0
for i in dfs:
    conf=confusion_matrix(test[it],pred[it])
    plt.title(f'Subject {i}')
    plt.subplot(4,5,it+1)
    sns.heatmap(conf, annot=True, fmt='d', cbar=False);
    plt.xlabel('Predicted')
    plt.ylabel('Actual')
    it+=1
# plt.figure(figsize=(4,5))

con=confusion_matrix(y_te_all,y_pred_all)
plt.figure(figsize=(4,5))
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Taking all subjects together')
sns.heatmap(con, annot=True, fmt='d', cbar=False)
plt.show()

X_tr_all,y_tr_all,X_te_all,y_te_all=to_test_train(df)

from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.neighbors import KNeighborsClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.tree import DecisionTreeClassifier
from sklearn.svm import SVC

DCT=DecisionTreeClassifier()
DCT.fit(X_tr_all,y_tr_all)
pred=DCT.predict(X_te_all)
print(accuracy(pred,y_te_all)*100,"%")

print("F1 Score",f1_score(y_te_all, pred, average="macro"))
print("Precision Score",precision_score(y_te_all,pred, average="macro"))
print("Recall Score",recall_score(y_te_all, pred, average="macro"))

from sklearn.metrics import confusion_matrix
con=confusion_matrix(y_te_all,pred)
plt.figure(figsize=(4,5))
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Taking all subjects together')
sns.heatmap(con, annot=True, fmt='d', cbar=False)
plt.show()



LDA=LinearDiscriminantAnalysis()

LDA.fit(X_tr_all,y_tr_all)
pred=LDA.predict(X_te_all)
print(accuracy(pred,y_te_all))

from sklearn.metrics import confusion_matrix
con=confusion_matrix(y_te_all,pred)
plt.figure(figsize=(4,5))
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Taking all subjects together')
sns.heatmap(con, annot=True, fmt='d', cbar=False)
plt.show()